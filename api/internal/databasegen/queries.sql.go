// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package databasegen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createClient = `-- name: CreateClient :one
INSERT INTO client (
  name, address
) VALUES (
  $1, $2
)
RETURNING client_id, name, address
`

type CreateClientParams struct {
	Name    string
	Address pgtype.Text
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRow(ctx, createClient, arg.Name, arg.Address)
	var i Client
	err := row.Scan(&i.ClientID, &i.Name, &i.Address)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM client
WHERE client_id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, clientID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteClient, clientID)
	return err
}

const getClient = `-- name: GetClient :one
SELECT client_id, name, address FROM client
WHERE client_id = $1 LIMIT 1
`

func (q *Queries) GetClient(ctx context.Context, clientID pgtype.UUID) (Client, error) {
	row := q.db.QueryRow(ctx, getClient, clientID)
	var i Client
	err := row.Scan(&i.ClientID, &i.Name, &i.Address)
	return i, err
}

const listClients = `-- name: ListClients :many
SELECT client_id, name, address FROM client
ORDER BY name
`

func (q *Queries) ListClients(ctx context.Context) ([]Client, error) {
	rows, err := q.db.Query(ctx, listClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(&i.ClientID, &i.Name, &i.Address); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClient = `-- name: UpdateClient :exec
UPDATE client
  set name = $2,
  address = $3
WHERE client_id = $1
`

type UpdateClientParams struct {
	ClientID pgtype.UUID
	Name     string
	Address  pgtype.Text
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) error {
	_, err := q.db.Exec(ctx, updateClient, arg.ClientID, arg.Name, arg.Address)
	return err
}
